//Sistema de Inventario Completo con HashMap y ArrayList
//Requisitos cumplidos:
//1. Almacenar informaci√≥n completa de productos
//2. Base de datos simulada con HashMap y ArrayList
//3. Modificar precios de productos
//4. Eliminar productos de la bodega
//5. Verificaci√≥n autom√°tica de productos vencidos (resta stock despu√©s de 3 d√≠as)

import java.util.ArrayList; //la lista
import java.util.HashMap; //y como el inventario
import java.util.Scanner;
import java.time.LocalDate; //obviamente calcula la hora de la ejecuci√≥n del programa
import java.time.format.DateTimeFormatter; //por defecto cuando usamos una libreria de tiempo, este da un formato raro, y esta libre√≠a lo que hace es darle un formato entendible
import java.time.format.DateTimeParseException; //Esta es para que el programa no tire erroes cuando se le da un valor incorrecto
import java.time.temporal.ChronoUnit; // Se usa principalmente para medir o sumar/restar tiempo entre fechas u horas

public class Main {
    // Scanner global para entrada de datos
    private static Scanner entrada = new Scanner(System.in);

    // HashMap: Almacena productos con c√≥digo como clave √∫nica (base de datos principal)
    private static HashMap<String, Articulo> bodega = new HashMap<>();

    // ArrayList: Lista numerada para mostrar productos al usuario
    private static ArrayList<Articulo> inventario = new ArrayList<>();

    public static void main(String[] args) {
        // Sistema de gesti√≥n de inventario para supermercado
        // Funcionalidades: registrar, eliminar, mostrar, actualizar precios
        // Verificaci√≥n autom√°tica de productos vencidos cada vez que se ejecuta el men√∫

        String seleccion;

        do {
            verificarProductosVencidos();

            mostrarMenuPrincipal();
            seleccion = entrada.nextLine();
            procesarOpcion(seleccion);
        } while (!seleccion.equals("6"));

        System.out.println("¬°Gracias por usar el sistema de inventario!");
        entrada.close();
    }

    /**
     * Muestra el men√∫ principal del sistema
     */
    private static void mostrarMenuPrincipal() {
        System.out.println("\n\u001B[=== Sistema de Inventario ===");
        System.out.println("Seleccione una opci√≥n:");
        System.out.println("  1. Registrar nuevo art√≠culo en bodega ");
        System.out.println("  2. Guardar los productos del inventario en lista");
        System.out.println("  3. Mostrar los productos disponibles");
        System.out.println("  4. Eliminar art√≠culo");
        System.out.println("  5. Actualizar precio");
        System.out.println("  6. Cerrar sistema");
        System.out.print("Opci√≥n: ");
    }

    /**
     * Procesa la opci√≥n seleccionada por el usuario
     */
    private static void procesarOpcion(String opcion) {
        switch (opcion) {
            case "1":
                registrarNuevoArticulo();
                break;
            case "2":
                pasarDelHashMapAlArrayList();
                break;
            case "3":
                mostrarInventario();
                break;
            case "4":
                eliminarArticulo();
                break;
            case "5":
                actualizarPrecio();
                break;
            case "6":
                break;
            default:
                System.out.println("‚ö†Ô∏è Opci√≥n no v√°lida. Intente de nuevo.");
        }
    }

    /**
     * Registra un nuevo art√≠culo en el HashMap (base de datos principal)
     * Incluye todas las variables requeridas: ID, nombre, precio, cantidad, etc.
     */
    private static void registrarNuevoArticulo() {
        System.out.println("\n--- Registro de Nuevo Art√≠culo en bodega ---");

        // ID del producto (c√≥digo √∫nico)
        System.out.print("C√≥digo del art√≠culo (ID): ");
        String codigo = entrada.nextLine();

        // Verificar si ya existe el c√≥digo (evitar duplicados)
        if (bodega.containsKey(codigo)) {
            System.out.println("‚ùå Ya existe un art√≠culo con ese c√≥digo");
            return;
        }

        // Nombre del producto
        System.out.print("Nombre del art√≠culo: ");
        String nombreArticulo = entrada.nextLine();

        // Descripci√≥n del producto
        System.out.print("Descripci√≥n: ");
        String detalles = entrada.nextLine();

        // Categor√≠a del producto
        System.out.print("Categor√≠a: ");
        String tipoCategoria = entrada.nextLine();

        // Nombre del proveedor
        System.out.print("Proveedor: ");
        String empresaProveedora = entrada.nextLine();

        // Fotograf√≠a 1
        System.out.print("URL imagen principal (Fotograf√≠a 1): ");
        String imagenPrincipal = entrada.nextLine();

        // Fotograf√≠a 2
        System.out.print("URL imagen secundaria (Fotograf√≠a 2): ");
        String imagenSecundaria = entrada.nextLine();

        // Fecha de vencimiento
        LocalDate fechaCaducidad = solicitarFecha();

        // Precio del producto
        System.out.print("Precio por unidad: ");
        int valorUnitario = entrada.nextInt();

        // Cantidad en bodega
        System.out.print("Cantidad en bodega (stock): ");
        int stockActual = entrada.nextInt();
        entrada.nextLine(); // Limpiar buffer

        // Caducidad: por defecto todos los productos pueden vencerse
        boolean tieneVencimiento = true;

        // Crear nuevo art√≠culo con todos los datos
        Articulo nuevoArticulo = new Articulo(codigo, nombreArticulo, detalles,
                tipoCategoria, empresaProveedora,
                imagenPrincipal, imagenSecundaria,
                fechaCaducidad, valorUnitario,
                stockActual, tieneVencimiento);

        // Guardar en el HashMap usando el c√≥digo como clave √∫nica
        bodega.put(codigo, nuevoArticulo);

        System.out.println("‚úÖ Art√≠culo registrado en inventario exitosamente");
        System.out.println("üì¶ Total productos en Bodega: " + bodega.size());
    }

    /**
     * FUNCI√ìN NUEVA: Transfiere todos los productos del HashMap al ArrayList
     * Esto permite trabajar con listas numeradas para mostrar al usuario
     */
    private static void pasarDelHashMapAlArrayList() {
        if (bodega.isEmpty()) {
            System.out.println("‚ö†Ô∏è No hay art√≠culos en el inventario para pasar a la lista");
            return;
        }

        System.out.println("\n--- Pasando productos del inventario a la lista---");

        // Limpiar el ArrayList antes de llenarlo (evitar duplicados)
        inventario.clear();

        // Recorrer el HashMap y agregar cada producto al ArrayList
        // keySet() devuelve todos los c√≥digos (claves) del HashMap
        for (String codigo : bodega.keySet()) {
            Articulo producto = bodega.get(codigo); // Obtener producto por c√≥digo
            inventario.add(producto);               // Agregarlo al ArrayList
        }

        System.out.println("‚úÖ Se pasaron " + inventario.size() + " productos a la lista");
        System.out.println("üìã el inventaruo tiene: " + bodega.size() + " productos");
        System.out.println("üìù La lista tiene: " + inventario.size() + " productos");
    }

    /**
     * FUNCI√ìN NUEVA: Verifica productos vencidos y reduce stock autom√°ticamente
     * Si han pasado 3 d√≠as desde el vencimiento, resta 1 unidad del stock
     * Esta funci√≥n se ejecuta autom√°ticamente cada vez que se muestra el men√∫
     */
    private static void verificarProductosVencidos() {
        // Solo verificar si hay productos en el ArrayList
        if (inventario.isEmpty()) {
            return;
        }

        LocalDate hoy = LocalDate.now(); // Fecha actual del sistema

        // Recorrer todos los productos del inventario
        for (Articulo articulo : inventario) {
            // Solo verificar productos que pueden vencerse
            if (articulo.tieneVencimiento) {
                // Calcular cu√°ntos d√≠as han pasado desde la fecha de vencimiento
                long diasVencido = ChronoUnit.DAYS.between(articulo.fechaCaducidad, hoy);

                // Si han pasado 3 o m√°s d√≠as Y hay stock disponible
                if (diasVencido >= 3 && articulo.stockActual > 0) {
                    // Restar 1 unidad del stock (producto vencido)
                    articulo.stockActual -= 1;

                    // Mostrar mensaje informativo
                    System.out.println("‚ö†Ô∏è Producto vencido eliminado: " + articulo.nombreArticulo +
                            " - Stock actual: " + articulo.stockActual);

                    // Tambi√©n actualizar en el HashMap para mantener sincronizaci√≥n
                    bodega.get(articulo.codigo).stockActual = articulo.stockActual;
                }
            }
        }
    }

    /**
     * Solicita al usuario que ingrese una fecha de vencimiento
     * retornar el LocalDate con la fecha ingresada
     */
    private static LocalDate solicitarFecha() {
        System.out.println("--- Fecha de Vencimiento ---");
        System.out.print("A√±o de vencimiento: ");
        int year = entrada.nextInt();
        System.out.print("Mes de vencimiento (1-12): ");
        int mesVencimiento = entrada.nextInt();
        System.out.print("D√≠a de vencimiento: ");
        int diaVencimiento = entrada.nextInt();

        return LocalDate.of(year, mesVencimiento, diaVencimiento);
    }

    /**
     * Permite eliminar un art√≠culo tanto del ArrayList como del HashMap
     * Cumple con el requisito: "permitir eliminar un producto de la bodega"
     */
    private static void eliminarArticulo() {
        if (inventario.isEmpty()) {
            System.out.println("‚ö†Ô∏è No hay art√≠culos en el ArrayList");
            System.out.println("üí° Primero pase productos del HashMap al ArrayList (opci√≥n 2)");
            return;
        }

        System.out.println("\n--- Eliminar Art√≠culo ---");
        listarArticulosSimple();

        System.out.print("N√∫mero del art√≠culo a eliminar: ");
        int indiceEliminar = entrada.nextInt();
        entrada.nextLine();

        // Verificar que el √≠ndice sea v√°lido
        if (indiceEliminar > 0 && indiceEliminar <= inventario.size()) {
            Articulo articuloEliminado = inventario.get(indiceEliminar - 1);

            // Eliminar del ArrayList (lista numerada)
            inventario.remove(indiceEliminar - 1);

            // Tambi√©n eliminar del HashMap (base de datos principal)
            bodega.remove(articuloEliminado.codigo);

            System.out.println("‚úÖ Art√≠culo eliminado de ambas estructuras");
            System.out.println("üóëÔ∏è Producto eliminado: " + articuloEliminado.nombreArticulo);
        } else {
            System.out.println("‚ùå N√∫mero de art√≠culo inv√°lido");
        }
    }

    /**
     * Muestra todos los productos del ArrayList (inventario numerado)
     */
    private static void mostrarInventario() {
        if (inventario.isEmpty()) {
            System.out.println("‚ö†Ô∏è El ArrayList est√° vac√≠o");
            System.out.println("üí° Primero pase productos del HashMap al ArrayList (opci√≥n 2)");
            return;
        }

        System.out.println("\n--- Inventario del ArrayList ---");
        int contador = 1;
        for (Articulo articulo : inventario) {
            System.out.println("ART√çCULO #" + contador);
            System.out.println(articulo);
            contador++;
        }
    }

    /**
     * Permite actualizar el precio de cualquier producto
     * Cumple con el requisito: "permitir modificar el precio unitario"
     */
    private static void actualizarPrecio() {
        if (inventario.isEmpty()) {
            System.out.println("‚ö†Ô∏è No hay art√≠culos para actualizar en el ArrayList");
            System.out.println("üí° Primero pase productos del HashMap al ArrayList (opci√≥n 2)");
            return;
        }

        System.out.println("\n--- Actualizar Precio ---");
        listarArticulosConPrecio();

        System.out.print("N√∫mero del art√≠culo: ");
        int indiceActualizar = entrada.nextInt();

        if (indiceActualizar > 0 && indiceActualizar <= inventario.size()) {
            System.out.print("Nuevo precio: ");
            int precioNuevo = entrada.nextInt();

            Articulo articuloActualizar = inventario.get(indiceActualizar - 1);

            // Actualizar precio en el ArrayList
            articuloActualizar.valorUnitario = precioNuevo;

            // Tambi√©n actualizar en el HashMap para mantener sincronizaci√≥n
            bodega.get(articuloActualizar.codigo).valorUnitario = precioNuevo;

            System.out.println("‚úÖ Precio actualizado en ambas estructuras");
            System.out.println("üí∞ Nuevo precio: $" + precioNuevo);
        } else {
            System.out.println("‚ùå N√∫mero de art√≠culo inv√°lido");
        }
    }

    /**
     * Muestra una lista simple de art√≠culos (solo nombre y c√≥digo)
     */
    private static void listarArticulosSimple() {
        int index = 1;
        for (Articulo a : inventario) {
            System.out.println("Art√≠culo " + index + ": " + a.nombreArticulo + " (C√≥digo: " + a.codigo + ")");
            index++;
        }
    }

    /**
     * Muestra una lista de art√≠culos con sus precios
     */
    private static void listarArticulosConPrecio() {
        int index = 1;
        for (Articulo a : inventario) {
            System.out.println("Art√≠culo " + index + ": " + a.nombreArticulo +
                    " - Precio: $" + a.valorUnitario + " (C√≥digo: " + a.codigo + ")");
            index++;
        }
    }
}

/**
 * Clase para validar datos (funcionalidad adicional)
 */
class ValidadorDatos {
    /**
     * Solicita una fecha con formato espec√≠fico
     * @param scanner Scanner para entrada de datos
     * @return LocalDate con la fecha v√°lida
     */
    public static LocalDate solicitarFechaConFormato(Scanner scanner) {
        DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        while (true) {
            System.out.print("üìÖ Ingrese fecha (YYYY-MM-DD): ");
            String fechaTexto = scanner.nextLine();

            try {
                return LocalDate.parse(fechaTexto, formatoFecha);
            } catch (DateTimeParseException error) {
                System.out.println("‚ùå Formato incorrecto. Use YYYY-MM-DD");
            }
        }
    }
}

/**
 * Clase Articulo: Contiene toda la informaci√≥n requerida de un producto
 * Cumple con TODAS las variables solicitadas en los requisitos
 */
class Articulo {
    // Variables requeridas por los requisitos:
    String codigo;              // ID del producto
    String nombreArticulo;      // Nombre del producto
    String detalles;           // Descripci√≥n
    String tipoCategoria;      // Categor√≠a
    String empresaProveedora;  // Nombre del proveedor
    String imagenPrincipal;    // Fotograf√≠a 1
    String imagenSecundaria;   // Fotograf√≠a 2
    LocalDate fechaCaducidad;  // Fecha de vencimiento
    int valorUnitario;         // Precio
    int stockActual;           // Cantidad en bodega
    boolean tieneVencimiento;  // Caducidad (si el producto puede vencerse)

    /**
     * Constructor que inicializa todas las variables del producto
     */
    public Articulo(String codigo, String nombreArticulo, String detalles,
                    String tipoCategoria, String empresaProveedora,
                    String imagenPrincipal, String imagenSecundaria,
                    LocalDate fechaCaducidad, int valorUnitario,
                    int stockActual, boolean tieneVencimiento) {
        this.codigo = codigo;
        this.nombreArticulo = nombreArticulo;
        this.detalles = detalles;
        this.tipoCategoria = tipoCategoria;
        this.empresaProveedora = empresaProveedora;
        this.imagenPrincipal = imagenPrincipal;
        this.imagenSecundaria = imagenSecundaria;
        this.fechaCaducidad = fechaCaducidad;
        this.valorUnitario = valorUnitario;
        this.stockActual = stockActual;
        this.tieneVencimiento = tieneVencimiento;
    }

    /**
     * M√©todo toString para mostrar toda la informaci√≥n del producto de forma organizada
     */
    @Override
    public String toString() {
        return "üõçÔ∏è Art√≠culo: " + nombreArticulo +
                "\nüè∑Ô∏è C√≥digo (ID): " + codigo +
                "\nüìã Descripci√≥n: " + detalles +
                "\nüóÇÔ∏è Categor√≠a: " + tipoCategoria +
                "\nüè™ Proveedor: " + empresaProveedora +
                "\nüñºÔ∏è Fotograf√≠a 1: " + imagenPrincipal +
                "\nüñºÔ∏è Fotograf√≠a 2: " + imagenSecundaria +
                "\nüìÜ Vence: " + fechaCaducidad +
                "\nüí∞ Precio: $" + valorUnitario +
                "\nüìä Cantidad en bodega: " + stockActual + " unidades" +
                "\n‚è∞ Tiene vencimiento: " + (tieneVencimiento ? "‚úÖ S√≠" : "‚ùå No") +
                "\n=============================================";
    }
}